{"version":3,"sources":["constants.js","components/Address.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","helpers/rpc.js","components/Balance.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/Header.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","views/Home.jsx","views/ExampleUI.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","RPC_POLL_TIME","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","process","REACT_APP_CODESPACES","window","location","hostname","replace","global","mainnet","goerli","faucet","xdai","price","gasPrice","polygon","mumbai","localOptimismL1","localOptimism","goerliOptimism","optimism","goerliArbitrum","arbitrum","devnetArbitrum","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","moonbeam","moonriver","moonbaseAlpha","moonbeamDevNode","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","ethers","require","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","provider","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","getRPCPollTime","_network","Balance","useState","dollarMode","setDollarMode","localProviderPollingTime","balance","useBalance","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculatePK","officialEthersWallet","Wallet","calculateAddress","opacity","Password","disabled","height","float","currentPrivateKey","localStorage","getItem","setItem","Date","now","trim","reload","marginRight","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","showImport","providerSend","title","WalletOutlined","rotate","showImportButton","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","inputStyle","visible","paddingRight","onOk","onCancel","footer","type","loading","parseEther","to","SendOutlined","Account","accountButtonInfo","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","action","marginLeft","shape","constants","tryToDisplay","thing","asText","toNumber","displayable","formatUnits","overflowWrap","constructor","mostReadable","v","includes","tryToDisplayAsText","map","replaceAll","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","icon","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","fn","handleForm","returned","buttonIcon","stateMutability","defaultValue","bordered","args","baseType","overrides","noContractDisplay","className","borderRadius","fontWeight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","contractDisplay","contractFuncInfo","contractFunc","connect","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","Title","Header","link","subTitle","justifyContent","flexDirection","flex","alignItems","children","defaultProps","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","Home","Web3","ExampleUI","_totalSupply","writeContracts","border","listStyleType","flexWrap","YourContract","buy","toWei","nonce","update","status","axios","post","content","gasUsed","gas","Hints","selectedToken","setSelectedToken","listOfTokens","useTokenList","showSearch","filterOption","option","optionFilterProp","token","symbol","highlight","Subgraph","EXAMPLE_GRAPHQL","EXAMPLE_GQL","gql","useQuery","pollInterval","purposeColumns","dataIndex","render","record","sender","d","toISOString","newPurpose","setNewPurpose","deployWarning","paddingBottom","setPurpose","dataSource","purposes","columns","rowKey","fetcher","graphQLParams","fetch","subgraphUri","headers","then","response","json","docExplorerOpen","query","initialNetwork","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","useLocation","REACT_APP_PROVIDER","mainnetProviderPollingTime","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useUserProviderAndSigner","yourMainnetBalance","deployedContracts","externalContracts","readContracts","mainnetContracts","myMainnetDAIBalance","useContractReader","purpose","Web3Provider","code","reason","faucetAvailable","connection","useBurner","lte","exact","path","DAI","align","gutter","prevTheme","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","getElementById","module","exports","abi","internalType","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.eda25001.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\n/*\nDecrease the number of RPC calls by passing this value to hooks\nwith pollTime (useContractReader, useBalance, etc.)\n\nSet it to 0 to disable it and make RPC calls \"onBlock\".\n\nNote: this is not used when you are in the local hardhat chain.\n*/\nexport const RPC_POLL_TIME = 30000;\n\nconst localRpcUrl = process.env.REACT_APP_CODESPACES\n  ? `https://${window.location.hostname.replace(\"3000\", \"8545\")}`\n  : \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: localRpcUrl,\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  goerliOptimism: {\n    name: \"goerliOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"https://optimism.io\",\n    rpcUrl: `https://goerli.optimism.io/`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  goerliArbitrum: {\n    name: \"goerliArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421613,\n    blockExplorer: \"https://goerli-rollup-explorer.arbitrum.io\",\n    rpcUrl: \"https://goerli-rollup.arbitrum.io/rpc/\",\n  },\n  arbitrum: {\n    name: \"arbitrum\",\n    color: \"#28a0f0\",\n    chainId: 42161,\n    blockExplorer: \"https://arbiscan.io/\",\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n  },\n  devnetArbitrum: {\n    name: \"devnetArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421612,\n    blockExplorer: \"https://nitro-devnet-explorer.arbitrum.io/\",\n    rpcUrl: \"https://nitro-devnet.arbitrum.io/rpc\",\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n  moonbeam: {\n    name: \"moonbeam\",\n    color: \"#53CBC9\",\n    chainId: 1284,\n    blockExplorer: \"https://moonscan.io\",\n    rpcUrl: \"https://rpc.api.moonbeam.network\",\n  },\n  moonriver: {\n    name: \"moonriver\",\n    color: \"#53CBC9\",\n    chainId: 1285,\n    blockExplorer: \"https://moonriver.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonriver.moonbeam.network\",\n  },\n  moonbaseAlpha: {\n    name: \"moonbaseAlpha\",\n    color: \"#53CBC9\",\n    chainId: 1287,\n    blockExplorer: \"https://moonbase.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonbase.moonbeam.network\",\n    faucet: \"https://discord.gg/SZNP8bWHZq\",\n  },\n  moonbeamDevNode: {\n    name: \"moonbeamDevNode\",\n    color: \"#53CBC9\",\n    chainId: 1281,\n    blockExplorer: \"https://moonbeam-explorer.netlify.app/\",\n    rpcUrl: \"http://127.0.0.1:9933\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/** \n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\",\n            71401: \"https://godwoken-testnet-v1.ckbapp.dev\",\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import { RPC_POLL_TIME } from \"../constants\";\n\n// Get the appropriate polling time for a given provider.\nexport const getRPCPollTime = provider => {\n  // No polling interval on local hardhat chain.\n  if (provider?._network?.chainId === 31337) {\n    return 0;\n  } else {\n    return RPC_POLL_TIME;\n  }\n};\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\nimport { getRPCPollTime } from \"../helpers\";\n\nconst { utils } = require(\"ethers\");\n\n/**\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  let localProviderPollingTime = getRPCPollTime(props.provider);\n\n  const balance = useBalance(props.provider, props.address, localProviderPollingTime);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Button, Input } from \"antd\";\nimport Address from \"./Address\";\n\nexport default function WalletImport({ setShowImport }) {\n  const [importMnemonic, setImportMnemonic] = useState();\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\n  const [password, setPassword] = useState(\"\");\n  const [importPrivatekey, setImportPrivatekey] = useState();\n  const [importAddress, setImportAddress] = useState();\n\n  useEffect(() => {\n    const calculatePK = async () => {\n      if (importMnemonic) {\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\n\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\n        const fullPath = wallet_hdpath + importMnemonicIndex;\n\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\n\n        setImportPrivatekey(ethersPrivateKey);\n      } else {\n        setImportPrivatekey();\n      }\n    };\n    calculatePK();\n  }, [importMnemonic, importMnemonicIndex, password]);\n\n  useEffect(() => {\n    const calculateAddress = async () => {\n      if (importPrivatekey) {\n        try {\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\n          console.log(officialEthersWallet);\n          setImportAddress(officialEthersWallet.address);\n        } catch (e) {\n          console.log(e);\n          setImportAddress(\"\");\n        }\n      }\n    };\n    calculateAddress();\n  }, [importPrivatekey]);\n\n  return (\n    <div>\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h2>IMPORT</h2>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"word1 word2 word3\"\n        onChange={async e => {\n          setImportMnemonic(e.target.value);\n        }}\n      />\n\n      <Input\n        style={{ width: 69 }}\n        value={importMnemonicIndex}\n        onChange={e => {\n          setImportMnemonicIndex(e.target.value);\n        }}\n        size=\"large\"\n      />\n\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"optional password\"\n        onChange={async e => {\n          setPassword(e.target.value);\n        }}\n      />\n\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h4>OR</h4>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>private key</div>\n      <Input.Password\n        disabled={importMnemonic}\n        style={{ width: 420 }}\n        size=\"large\"\n        value={importPrivatekey}\n        placeholder=\"0x...\"\n        onChange={e => {\n          setImportPrivatekey(e.target.value);\n        }}\n      />\n\n      <hr />\n\n      {importAddress ? (\n        <div style={{ width: 420, height: 200 }}>\n          <div style={{ float: \"right\", marginTop: 64 }}>\n            <Address value={importAddress} />\n          </div>\n          <hr />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div style={{ float: \"right\" }}>\n        <Button\n          style={{ marginTop: 16 }}\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\n          onClick={() => {\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n            if (currentPrivateKey) {\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n            }\n\n            try {\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\n              console.log(officialEthersWallet);\n              setImportAddress(officialEthersWallet.address);\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\n              window.location.reload();\n              //setShowImport(!showImport)\n            } catch (e) {\n              console.log(e);\n            }\n          }}\n        >\n          <span style={{ marginRight: 8 }}>💾</span>Save\n        </Button>\n      </div>\n\n      <Button\n        style={{ marginTop: 16 }}\n        onClick={() => {\n          setShowImport(false);\n        }}\n      >\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\n      </Button>\n    </div>\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\nimport WalletImport from \"./WalletImport\";\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const [showImport, setShowImport] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: props.padding ? props.padding : 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: props.size ? props.size : 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  const showImportButton = (\n    <Button\n      style={{ marginTop: 16 }}\n      onClick={() => {\n        setShowImport(true);\n      }}\n    >\n      <span style={{ marginRight: 8 }}>💾</span>Import\n    </Button>\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\n\n      display = (\n        <div>\n          <div>\n            <b>Private Key:</b>\n            <div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {pk}\n              </Text>\n            </div>\n\n            <div style={{ marginTop: 16 }}>\n              <div>\n                <b>Punk Wallet:</b>\n              </div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {fullLink}\n              </Text>\n            </div>\n\n            <br />\n            <i>\n              Point your camera phone at qr code to open in &nbsp;\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\n                Punk Wallet\n              </a>\n              :\n            </i>\n\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                const el = document.createElement(\"textarea\");\n                el.value = fullLink;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand(\"copy\");\n                document.body.removeChild(el);\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\n              }}\n            >\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\n            </div>\n          </div>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={\n          showImport\n            ? null\n            : [\n                showImportButton,\n                privateKeyButton,\n                receiveButton,\n                <Button\n                  key=\"submit\"\n                  type=\"primary\"\n                  disabled={!amount || !toAddress || qr}\n                  loading={false}\n                  onClick={() => {\n                    const tx = Transactor(props.signer || props.provider);\n\n                    let value;\n                    try {\n                      value = ethers.utils.parseEther(\"\" + amount);\n                    } catch (e) {\n                      // failed to parseEther, try something else\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n                    }\n\n                    tx({\n                      to: toAddress,\n                      value,\n                    });\n                    setOpen(!open);\n                    setQr();\n                  }}\n                >\n                  <SendOutlined /> Send\n                </Button>,\n              ]\n        }\n      >\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/** \n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  let accountButtonInfo;\n  if (web3Modal?.cachedProvider) {\n    accountButtonInfo = { name: \"Logout\", action: logoutOfWeb3Modal };\n  } else {\n    accountButtonInfo = { name: \"Connect\", action: loadWeb3Modal };\n  }\n\n  const display = !minimized && (\n    <span>\n      {address && (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={20} />\n      )}\n      <Balance address={address} provider={localProvider} price={price} size={20} />\n      {!isContract && (\n        <Wallet\n          address={address}\n          provider={localProvider}\n          signer={userSigner}\n          ensProvider={mainnetProvider}\n          price={price}\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          size={22}\n          padding={\"0px\"}\n        />\n      )}\n    </span>\n  );\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {display}\n      {web3Modal && (\n        <Button style={{ marginLeft: 8 }} shape=\"round\" onClick={accountButtonInfo.action}>\n          {accountButtonInfo.name}\n        </Button>\n      )}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\n\nimport { tryToDisplay } from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh, blockExplorer }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable, false, blockExplorer)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <Button type=\"link\" onClick={refresh} icon=\"🔄\" />\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon = isReadable(functionInfo) ? (\n    <Button style={{ marginLeft: -32 }}>Read📡</Button>\n  ) : (\n    <Button style={{ marginLeft: -32 }}>Send💸</Button>\n  );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if ([\"array\", \"tuple\"].includes(input.baseType)) {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\nimport React, { useMemo, useState } from \"react\";\nimport Address from \"../Address\";\nimport Balance from \"../Balance\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n  contractConfig,\n}) {\n  const contracts = useContractLoader(provider, contractConfig, chainId);\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(() => {\n    const results = contract\n      ? Object.entries(contract.interface.functions).filter(\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\n        )\n      : [];\n    return results;\n  }, [contract, show]);\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\n    const contractFunc =\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\n        ? contract[contractFuncInfo[0]]\n        : contract.connect(signer)[contractFuncInfo[0]];\n\n    if (typeof contractFunc === \"function\") {\n      if (isQueryable(contractFuncInfo[1])) {\n        // If there are no inputs, just display return value\n        return (\n          <DisplayVariable\n            key={contractFuncInfo[1].name}\n            contractFunction={contractFunc}\n            functionInfo={contractFuncInfo[1]}\n            refreshRequired={refreshRequired}\n            triggerRefresh={triggerRefresh}\n            blockExplorer={blockExplorer}\n          />\n        );\n      }\n\n      // If there are inputs, display a form to allow users to provide these\n      return (\n        <FunctionForm\n          key={\"FF\" + contractFuncInfo[0]}\n          contractFunction={contractFunc}\n          functionInfo={contractFuncInfo[1]}\n          provider={provider}\n          gasPrice={gasPrice}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    return null;\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div style={{ fontSize: 24 }}>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Address value={address} blockExplorer={blockExplorer} />\n              <Balance address={address} provider={provider} price={price} />\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.5\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title, Text } = Typography;\n\n// displays a page header\n\nexport default function Header({ link, title, subTitle, ...props }) {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1, alignItems: \"start\" }}>\n        <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n          <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\n            {title}\n          </Title>\n        </a>\n        <Text type=\"secondary\" style={{ textAlign: \"left\" }}>\n          {subTitle}\n        </Text>\n      </div>\n      {props.children}\n    </div>\n  );\n}\n\nHeader.defaultProps = {\n  link: \"https://github.com/mineonliumoffical\",\n  title: \"Mo-Donate Contract Interface\",\n  subTitle: \"Become an intial supporter of the MineOnlium project\",\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray, localProvider = null) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    // Re-use the localProvider if it's mainnet (to use only one instance of it)\n    if (localProvider && localProvider?._network.chainId === 1) {\n      setProvider(localProvider);\n      return;\n    }\n\n    handleProviders();\n\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray), localProvider]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils, ethers } from \"ethers\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\n\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/** \nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n**/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 150, top: 25, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Button } from \"antd\";\nimport React, { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBalance, useGasPrice } from \"eth-hooks\";\n\nimport { getRPCPollTime, Transactor } from \"../helpers\";\n\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\n  const [faucetClicked, setFaucetClicked] = useState(false);\n\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n\n  // fetch local balance\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // get gas Price from network\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  let faucetHint = \"\";\n\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ position: \"absolute\", right: 65, top: 65 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  return faucetHint;\n}\n\nexport default FaucetHint;\n","import { useContractReader } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * web3 props can be passed from '../App.jsx' into your local view component for use\n * @param {*} yourLocalBalance balance on current network\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\n * @returns react component\n **/\nfunction Home({ yourLocalBalance, readContracts }) {\n  // you can also use hooks locally in your component of choice\n  // in this case, let's keep track of 'purpose' variable from our contract\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        This Is Your App Home. You can start editing it in{\" \"}\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/views/Home.jsx\n        </span>\n      </div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>✏️</span>\n        Edit your smart contract{\" \"}\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          YourContract.sol\n        </span>{\" \"}\n        in{\" \"}\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n      {!purpose ? (\n        <div style={{ margin: 32 }}>\n          <span style={{ marginRight: 8 }}>👷‍♀️</span>\n          You haven't deployed your contract yet, run\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn chain\n          </span>{\" \"}\n          and{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn deploy\n          </span>{\" \"}\n          to deploy your first contract!\n        </div>\n      ) : (\n        <div style={{ margin: 32 }}>\n          <span style={{ marginRight: 8 }}>🤓</span>\n          The \"purpose\" variable from your contract is{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            {purpose}\n          </span>\n        </div>\n      )}\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤖</span>\n        An example prop of your balance{\" \"}\n        <span style={{ fontWeight: \"bold\", color: \"green\" }}>({ethers.utils.formatEther(yourLocalBalance)})</span> was\n        passed into the\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          Home.jsx\n        </span>{\" \"}\n        component from\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          App.jsx\n        </span>\n      </div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>💭</span>\n        Check out the <Link to=\"/hints\">\"Hints\"</Link> tab for more tips.\n      </div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛠</span>\n        Tinker with your smart contract using the <Link to=\"/debug\">\"Debug Contract\"</Link> tab.\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Button, Divider, Input } from \"antd\";\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nvar Web3 = require(\"web3\");\n\nexport default function ExampleUI({\n  _totalSupply,\n  address,\n  // mainnetProvider,\n  // localProvider,\n  // yourLocalBalance,\n  // price,\n  tx,\n  // readContracts,\n  writeContracts,\n}) {\n  const [amount, setAmount] = useState(0);\n\n  const discordEndpoint =\n    \"https://discordapp.com/api/webhooks/1038599720303599676/348krIUb9it-lU_SNXmao6exCsdwA0K2kBIjsZMim5Z9nYpXfKzGR_rgGRqxXszh4c5E\";\n\n  function postNewEntryToDiscord() {\n    axios.post(discordEndpoint, {\n      content: \"A donation has appeared! From: \" + address + \" In the ammount of:  \" + amount + \" MATIC!\",\n    });\n  }\n\n  return (\n    <div>\n      {/*\n        ⚙️ Here is an example UI that displays and sets the purpose in your smart contract:\n      */}\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 400, margin: \"auto\", marginTop: 64 }}>\n        <h2>MineOnlium Donation Contract:</h2>\n        <Divider />\n        <Divider />\n        <div style={{ padding: 4, margin: 8, border: \"1px solid #cccccc\" }}>\n          <h1>Support MineOnlium! </h1>\n          <p>\n            <h3>\n              Donations are currently only available on the Polygon blockchain via MATIC. Supporters will receive\n              several gifts and rewards for their support:\n            </h3>\n            <div style={{ padding: 4, margin: 8, border: \"1px solid #cccccc\" }}>\n              <ul\n                style={{\n                  listStyleType: \"none\",\n                  padding: 0,\n                  margin: 0,\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  flexWrap: \"wrap\",\n                  justifyContent: \"space-around\",\n                }}\n              >\n                <li>A Shoutout on the MineOnlium Discord Server </li>\n                <li>1 WMO on Polygon (per 1 MATIC donated) </li>\n                <li>1 MO on MineOnlium (per 1 MATIC donated) </li>\n                <li>1 MSTR Token on MineOnlium (1 per donation address) </li>\n              </ul>\n            </div>\n          </p>\n          <p>Donations are non-refundable and will be used to fund the development of the MineOnlium project. </p>\n        </div>\n        <div style={{ padding: 4, margin: 8, border: \"1px solid #cccccc\" }}>\n          <h3>Donate:</h3>\n          <div style={{ margin: 8 }}>\n            <Input\n              onChange={e => {\n                setAmount(e.target.value);\n              }}\n            />\n          </div>\n          <div style={{ padding: 4, margin: 8, border: \"1px solid #cccccc\" }}>\n            <Button\n              onClick={async () => {\n                const result = tx(\n                  writeContracts.YourContract.buy({\n                    value: Web3.utils.toWei(amount, \"ether\"),\n                    nonce: 0,\n                  }),\n                  update => {\n                    console.log(\"📡 Transaction Update:\", update);\n                    if (update && (update.status === \"confirmed\" || update.status === 1)) {\n                      postNewEntryToDiscord();\n                      console.log(\" 🍾 Transaction \" + update.hash + \" finished!\");\n                      console.log(\n                        \" ⛽️ \" +\n                          update.gasUsed +\n                          \"/\" +\n                          (update.gasLimit || update.gas) +\n                          \" @ \" +\n                          parseFloat(update.gasPrice) / 1000000000 +\n                          \" gwei\",\n                      );\n                    }\n                  },\n                );\n                console.log(\"awaiting metamask/web3 confirm result...\", result);\n                console.log(await result);\n              }}\n            >\n              Donate\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>⛓️</span>\n        Make sure your local chain is running first:\n        <span className=\"highlight\" style={highlight}>\n          yarn chain\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data, if there is any:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a\n          href=\"https://thegraph.com/docs/en/developer/define-subgraph-hosted/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","import { Button, Col, Menu, Row } from \"antd\";\n\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  // useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.polygon; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"goerli\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n  const location = useLocation();\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n\n  const mainnetProvider = useStaticJsonRPC(providers, localProvider);\n\n  // Sensible pollTimes depending on the provider you are using\n  const localProviderPollingTime = getRPCPollTime(localProvider);\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  // useOnBlock(mainnetProvider, () => {\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  // });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(\n    mainnetContracts,\n    \"DAI\",\n    \"balanceOf\",\n    [\"0x34aA3F359A9D614239015126635CE7732c18fDF3\"],\n    mainnetProviderPollingTime,\n  );\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\", [], localProviderPollingTime);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\", addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\n      console.log(\"💵 yourMainnetDAIBalance\", myMainnetDAIBalance);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n    localChainId,\n    myMainnetDAIBalance,\n  ]);\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header>\n        {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\n          <div style={{ display: \"flex\", flex: 1 }}>\n            {USE_NETWORK_SELECTOR && (\n              <div style={{ marginRight: 20 }}>\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n            />\n          </div>\n        </div>\n      </Header>\n      {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\n        <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\n      )}\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n      {/* <Menu style={{ textAlign: \"center\", marginTop: 20 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\n        <Menu.Item key=\"/\">\n          <Link to=\"/\">App Home</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/debug\">\n          <Link to=\"/debug\">Debug Contracts</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/hints\">\n          <Link to=\"/hints\">Hints</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/exampleui\">\n          <Link to=\"/exampleui\">ExampleUI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/mainnetdai\">\n          <Link to=\"/mainnetdai\">Mainnet DAI</Link>\n        </Menu.Item>\n        <Menu.Item key=\"/subgraph\">\n          <Link to=\"/subgraph\">Subgraph</Link>\n        </Menu.Item>\n      </Menu> */}\n\n      <Switch>\n        <Route exact path=\"/\">\n          {/* pass in any web3 props to this Home component. For example, yourLocalBalance */}\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route>\n        <Route exact path=\"/debug\">\n          {/*\n                🎛 this scaffolding is full of commonly used components\n                this <Contract/> component will automatically parse your ABI\n                and give you a form to interact with it locally\n            */}\n\n          <Contract\n            name=\"YourContract\"\n            price={price}\n            signer={userSigner}\n            provider={localProvider}\n            address={address}\n            blockExplorer={blockExplorer}\n            contractConfig={contractConfig}\n          />\n        </Route>\n        <Route path=\"/hints\">\n          <Hints\n            address={address}\n            yourLocalBalance={yourLocalBalance}\n            mainnetProvider={mainnetProvider}\n            price={price}\n          />\n        </Route>\n        <Route path=\"/exampleui\">\n          <ExampleUI\n            address={address}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            localProvider={localProvider}\n            yourLocalBalance={yourLocalBalance}\n            price={price}\n            tx={tx}\n            writeContracts={writeContracts}\n            readContracts={readContracts}\n            purpose={purpose}\n          />\n        </Route>\n        <Route path=\"/mainnetdai\">\n          <Contract\n            name=\"DAI\"\n            customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.DAI}\n            signer={userSigner}\n            provider={mainnetProvider}\n            address={address}\n            blockExplorer=\"https://etherscan.io/\"\n            contractConfig={contractConfig}\n            chainId={1}\n          />\n          {/*\n            <Contract\n              name=\"UNI\"\n              customContract={mainnetContracts && mainnetContracts.contracts && mainnetContracts.contracts.UNI}\n              signer={userSigner}\n              provider={mainnetProvider}\n              address={address}\n              blockExplorer=\"https://etherscan.io/\"\n            />\n            */}\n        </Route>\n        <Route path=\"/subgraph\">\n          <Subgraph\n            subgraphUri={props.subgraphUri}\n            tx={tx}\n            writeContracts={writeContracts}\n            mainnetProvider={mainnetProvider}\n          />\n        </Route>\n      </Switch>\n\n      <ThemeSwitch />\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"dark\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}